VULTRA INTERNAL DOCUMENTATION
PROJECT OVERVIEW
Vultra is a vulnerability aggregator that analyzes project dependencies against known vulnerability databases (GHSA and NVD). It provides detailed information about vulnerabilities including type, severity, and patched versions. The project was developed for the ECS 260 Software Engineering course at UC Davis, Winter Quarter 2025.

Currently supported dependency management frameworks:

Maven (mvn)
Node Package Manager (npm)
ARCHITECTURE OVERVIEW
The system follows a modular architecture with clear separation of concerns:

Entry Point (main.py) - Command-line interface and orchestration
Parser Layer - Framework-specific dependency parsing
Handler Chain - Vulnerability data retrieval using Chain of Responsibility pattern
Detection Engine - Version comparison and vulnerability matching
Report Generation - HTML output generation
CORE COMPONENTS
MAIN APPLICATION (main.py)
Entry Point Functions:

parse_cmd_line_args(): Handles command-line argument parsing

Accepts --framework (mvn/npm) and --file (dependency manifest path)
Returns dictionary with framework and file path
get_parser(): Factory pattern implementation for parser selection

Returns appropriate parser instance based on framework
Raises ValueError for unsupported frameworks
init_handler_chain(): Sets up Chain of Responsibility pattern

Creates GHSA handler as primary
Links NVD handler as fallback
Returns chain head (GHSA handler)
Main Processing Flow:

Parse command-line arguments
Initialize appropriate parser
Extract dependency tree from manifest file
Flatten tree to unique dependency set
Initialize vulnerability handler chain
Process each dependency through handler chain
Collect and format vulnerability data
Generate statistics and HTML report
Data Structures:

Dependencies represented as tuples: (artifact_id, version, is_direct_dependency)
Vulnerability results contain: package_name, version, paths, vulnerabilities array
Statistics tracked: direct/transitive dependencies and vulnerabilities, vulnerability type counts
VULNERABILITY DETECTION ENGINE (vulnerabilityDetection.py)
Core Functions:

Version Analysis:

is_rc_version(): Detects pre-release versions using regex patterns

Matches: rc, beta, alpha, preview, snapshot, nightly, m\d+, SNAPSHOT
Case-insensitive matching
get_next_patch_version(): Calculates next patch version for vulnerability fixes

Increments micro version number using packaging.version.Version
Maven-Specific Functions:

get_valid_group_id(): Fetches valid group IDs from Maven Central

Uses Maven Central search API
Returns list of group IDs for given artifact
direct_update_for_rc_version(): Provides update recommendations for pre-release versions

For npm: Uses npm show command to fetch stable versions
For Maven: Queries Maven Central for latest stable version
CPE (Common Platform Enumeration) Validation:

is_valid_cpe(): Complex version range validation against CPE entries
Extracts product name from CPE criteria
Validates product name matching
Checks vulnerability status
Handles version range constraints with include/exclude limits
Returns vulnerability status and recommended safe version
Version Comparison Logic:

Supports various version constraint patterns:
No start, end exclude: version < end
No start, end include: version <= end
Start include, end include: start <= version <= end
Start exclude, end exclude: start < version < end
Start include, end exclude: start <= version < end
Start exclude, end include: start < version <= end
PARSER LAYER ===============
Base Class (dependency_parser.py):

Abstract base class defining parser interface
Three abstract methods:
get_dependency_tree(): Extract dependency tree from manifest
get_flat_dependency_set(): Flatten tree to unique dependencies
find_paths_in_tree(): Find all paths to specific package/version
Maven Parser (mvn_parser.py):

Extends DependencyParser for Maven projects
Uses maven-dependency-plugin:3.8.1:tree for dependency extraction
Subprocess execution with JSON output format
Implementation Details:

get_dependency_tree():

Validates pom.xml file existence
Executes Maven dependency:tree plugin with JSON output
Handles Maven execution errors and missing dependencies
Cleans up temporary JSON files
get_flat_dependency_set():

Recursive tree traversal
Tracks direct vs transitive dependency status
Creates package entries as (groupId:artifactId, version, is_direct)
Uses set to ensure uniqueness
find_paths_in_tree():

Recursive path finding algorithm
Builds dependency paths showing transitive relationships
Returns all paths leading to target package/version
NPM Parser (npm_parser.py):

Extends DependencyParser for NPM projects
Uses npm install and npm list commands
Implementation Details:

get_dependency_tree():

Validates package.json existence
Executes npm install to ensure package-lock.json exists
Runs npm list --all --json for complete dependency tree
Handles npm execution errors
get_flat_dependency_set():

Recursive traversal of dependencies object
Tracks direct vs transitive status
Creates entries as (package_name, version, is_direct)
find_paths_in_tree():

Builds dependency paths with arrow notation
Handles nested dependency structures
Returns paths showing how transitive dependencies are reached
DATA SOURCE HANDLERS =======================
The system uses Chain of Responsibility pattern for vulnerability data retrieval:

Handler Chain Structure:

GHSAHandler (Primary) -> NVDHandler (Fallback)
Each handler processes requests and passes to next if unable to handle
Handlers implement common interface for vulnerability queries
Expected Handler Interface:

handle(artifact_id, version, framework): Main processing method
set_next(handler): Chain setup method
Returns vulnerability data or None if no vulnerabilities found
REPORT GENERATION (report.py) ================================
HTML Report Generation:

generate_html_report(): Creates formatted vulnerability report
Uses template-based approach for consistent formatting
Includes vulnerability details, severity levels, and remediation guidance
Report Contents:

Summary statistics (direct/transitive dependencies and vulnerabilities)
Detailed vulnerability listings per package
Severity classifications
Patched version recommendations
Dependency path information for transitive vulnerabilities
CONFIGURATION AND DEPENDENCIES
Project Configuration (pyproject.toml):

Python >= 3.10 required
Core dependencies:
beautifulsoup4==4.13.3: HTML parsing for web scraping
packaging==24.2: Version comparison and parsing
requests==2.32.3: HTTP requests for API calls
Environment Requirements:

GitHub Personal Access Token (GITHUB_ACCESS_TOKEN environment variable)
Maven installation (for Maven projects)
NPM installation (for NPM projects)
Python 3.10+ with pip
EXECUTION FLOW
Command Line Processing:

Parse framework and file arguments
Validate input parameters
Parser Initialization:

Select appropriate parser based on framework
Initialize parser instance
Dependency Extraction:

Parse manifest file (pom.xml or package.json)
Build complete dependency tree
Extract unique dependency set with direct/transitive flags
Vulnerability Analysis:

Initialize handler chain (GHSA -> NVD)
Process each dependency through handlers
Collect vulnerability data
Data Processing:

Format vulnerability information
Calculate statistics
Build report data structures
Output Generation:

Print summary statistics to console
Generate HTML vulnerability report
Return structured JSON result
ERROR HANDLING
The system implements comprehensive error handling:

File validation before processing
Subprocess execution error handling
Network request failure handling
JSON parsing error handling
Missing dependency tool detection
Graceful degradation when handlers fail
Common Error Scenarios:

Missing manifest files
Maven/NPM tool not installed
Network connectivity issues
Invalid JSON responses
Missing GitHub access token
Malformed dependency data
TESTING STRUCTURE
The project includes a testing directory with test cases for:

Parser functionality
Vulnerability detection logic
Handler chain behavior
Report generation
Error handling scenarios
CI/CD INTEGRATION
Templates-cicd directory contains:

Docker configuration for containerized execution
CI/CD pipeline templates
Deployment configurations
EXTENSION POINTS
The architecture supports easy extension:

New Dependency Frameworks:

Implement DependencyParser interface
Add parser to factory method in main.py
Update command-line argument choices
New Vulnerability Sources:

Implement handler interface
Add to handler chain in init_handler_chain()
Follow Chain of Responsibility pattern
New Report Formats:

Extend report.py with new generation functions
Add format selection to command-line interface
HIGH-LEVEL FEATURES
MULTI-FRAMEWORK DEPENDENCY ANALYSIS

Unified interface for Maven and NPM projects
Extensible architecture for additional frameworks
Consistent dependency tree representation
COMPREHENSIVE VULNERABILITY DETECTION

Multiple data source integration (GHSA, NVD)
Fallback mechanism for data source availability
Version range validation with CPE matching
TRANSITIVE DEPENDENCY TRACKING

Complete dependency path analysis
Direct vs transitive vulnerability classification
Dependency relationship visualization
INTELLIGENT VERSION ANALYSIS

Pre-release version detection and handling
Semantic version comparison
Patch version recommendation
DETAILED REPORTING AND ANALYTICS

HTML report generation with vulnerability details
Statistical analysis of vulnerability patterns
Severity classification and remediation guidance
ROBUST ERROR HANDLING AND VALIDATION

Comprehensive input validation
Graceful failure handling
Detailed error reporting and diagnostics